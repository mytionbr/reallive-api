# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type ChatRoom {
  createdAt: String!
  id: ID!
  img: String
  title: String
  type: type!
  updatedAt: String!
  usersId: [String!]!
}

type ChatRoomInfoOutput {
  createdAt: String!
  id: ID!
  img: String
  lastMessages: LastMessages!
  title: String
  type: type!
  updatedAt: String!
  usersId: [String!]!
}

type ChatRoomMessagesOutput {
  createdAt: String!
  id: ID!
  img: String
  messages: [Message!]
  title: String
  type: type!
  updatedAt: String!
  usersId: [String!]!
}

input CreateChatRoomInput {
  title: String
  type: type!
  usersId: [String!]!
}

input CreateMessageInput {
  chatRoomId: String!
  content: String!
  userId: String!
}

input FindUserFilter {
  email: String
  id: String
  nickname: String
}

type LastMessage {
  content: String!
  updatedAt: String!
  user: UserMessage!
}

type LastMessages {
  count: Float!
  lastMessage: LastMessage
  viewed: Boolean!
}

input LoginUserInput {
  email: String!
  password: String!
}

type LoginUserOutput {
  token: String!
  userId: String!
}

type Message {
  chatRoomId: String!
  content: String!
  createdAt: String!
  id: ID!
  received: Boolean!
  userId: String!
  viewed: Boolean!
}

type Mutation {
  createChatRoom(data: CreateChatRoomInput!): ChatRoom!
  createMessage(data: CreateMessageInput!): Message!
  login(data: LoginUserInput!): LoginUserOutput!
  register(data: RegisterUserInput!): Boolean!
  verifyEmail(data: VerifyEmailInput!): Boolean!
}

type Query {
  findAll: [User!]!
  findAllChatRoomsByUserId(userId: String!): [ChatRoomInfoOutput!]!
  findChatRoomWithMessages(chatRoomId: String!, currentUserId: String!): ChatRoomMessagesOutput!
  findOne(findUserFilter: FindUserFilter!): User!
}

input RegisterUserInput {
  email: String!
  nickname: String!
  password: String!
}

type Subscription {
  messageAdded(chatRoomId: String!): Message!
}

type User {
  email: String!
  id: ID!
  nickname: String!
}

type UserMessage {
  nickname: String!
}

input VerifyEmailInput {
  code: String!
  userId: String!
}

enum type {
  GROUP
  SINGLE
}